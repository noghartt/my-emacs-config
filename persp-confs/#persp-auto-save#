;; -*- mode: emacs-lisp; eval: (progn (pp-buffer) (indent-buffer)) -*-
((def-persp nil
   ((def-buffer "CAPTURE-business.org" nil org-mode)
    (def-buffer "init.el" "/home/noghartt/dev/my-emacs-config/init.el" emacs-lisp-mode)
    (def-buffer "category_theory.org" "/home/noghartt/org-backup/notes/category_theory.org" org-mode))
   (def-wconf
     (((min-height . 4)
       (min-width . 10)
       (min-height-ignore . 1)
       (min-width-ignore . 2)
       (min-height-safe . 1)
       (min-width-safe . 2)
       (min-pixel-height . 68)
       (min-pixel-width . 80)
       (min-pixel-height-ignore . 17)
       (min-pixel-width-ignore . 16)
       (min-pixel-height-safe . 17)
       (min-pixel-width-safe . 16))
      leaf
      (last . t)
      (pixel-width . 128)
      (pixel-height . 34)
      (total-width . 16)
      (total-height . 2)
      (normal-height . 1.0)
      (normal-width . 1.0)
      (buffer " *corfu*"
	      (selected . t)
	      (hscroll . 0)
	      (fringes 0 0 t nil)
	      (margins nil)
	      (scroll-bars nil 0 t nil 0 t nil)
	      (vscroll . 0)
	      (dedicated . t)
	      (point . 1)
	      (start . 1))
      (prev-buffers
       ("CAPTURE-business.org" 86 394))))
   (def-params nil)
   t nil nil)
 (def-persp "test"
   ((def-buffer "cooking.org" "/home/noghartt/org-backup/notes/cooking.org" org-mode)
    (def-buffer "business.org" "/home/noghartt/org-backup/notes/business.org" org-mode)
    (def-buffer "articles.org" "/home/noghartt/org-backup/notes/articles.org" org-mode)
    (def-buffer "elfeed.org" "/home/noghartt/org-backup/elfeed.org" org-mode)
    (def-buffer "magit.el" "/home/noghartt/dev/my-emacs-config/site-lisp/magit/magit.el" emacs-lisp-mode)
    (def-buffer "keybinds.el" "/home/noghartt/dev/my-emacs-config/site-lisp/keybinds/keybinds.el" emacs-lisp-mode)
    (def-buffer "inbox.org" "/home/noghartt/org-backup/inbox.org" org-mode)
    (def-buffer "org.el" "/home/noghartt/dev/my-emacs-config/site-lisp/org/org.el" emacs-lisp-mode))
   (def-wconf
     (((min-height . 4)
       (min-width . 10)
       (min-height-ignore . 4)
       (min-width-ignore . 4)
       (min-height-safe . 1)
       (min-width-safe . 2)
       (min-pixel-height . 68)
       (min-pixel-width . 80)
       (min-pixel-height-ignore . 68)
       (min-pixel-width-ignore . 32)
       (min-pixel-height-safe . 17)
       (min-pixel-width-safe . 16))
      leaf
      (pixel-width . 1136)
      (pixel-height . 833)
      (total-width . 142)
      (total-height . 49)
      (normal-height . 1.0)
      (normal-width . 1.0)
      (buffer "*elfeed-search*"
	      (selected . t)
	      (hscroll . 0)
	      (fringes 8 8 nil nil)
	      (margins nil)
	      (scroll-bars nil 0 t nil 0 t nil)
	      (vscroll . 0)
	      (dedicated)
	      (point . 8200)
	      (start . 3652))
      (prev-buffers
       ("inbox.org" 1 424)
       ("elfeed.org" 1 2127)
       ("cooking.org" 1 512)
       ("articles.org" 1 169)
       ("CAPTURE-business.org" 86 453))))
   (def-params nil)
   nil nil nil)
 (def-persp "renlo" nil
   (def-wconf
     (((min-height . 4)
       (min-width . 10)
       (min-height-ignore . 3)
       (min-width-ignore . 4)
       (min-height-safe . 1)
       (min-width-safe . 2)
       (min-pixel-height . 68)
       (min-pixel-width . 80)
       (min-pixel-height-ignore . 51)
       (min-pixel-width-ignore . 32)
       (min-pixel-height-safe . 17)
       (min-pixel-width-safe . 16))
      leaf
      (pixel-width . 1256)
      (pixel-height . 765)
      (total-width . 157)
      (total-height . 45)
      (normal-height . 1.0)
      (normal-width . 1.0)
      (parameters
       (persp))
      (buffer "*scratch*"
	      (selected . t)
	      (hscroll . 0)
	      (fringes 8 8 nil nil)
	      (margins nil)
	      (scroll-bars nil 0 t nil 0 t nil)
	      (vscroll . 0)
	      (dedicated)
	      (point . 152)
	      (start . 1))
      (prev-buffers
       ("category_theory.org" 1 1)
       ("*GNU Emacs*" 1 77)
       ("*scratch*" 1 146))))
   (def-params nil)
   nil nil nil))
